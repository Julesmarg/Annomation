/**
 * Sends AI-generated creative graphic design briefs based on the specified frequency.
 */
function sendGraphicDesignBriefs() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Sheet1"); // Replace "Sheet1" with your sheet name.

  const data = sheet.getDataRange().getValues();
  const now = new Date();

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const task = row[0];
    const details = row[1];
    const frequency = row[2];
    const lastDateReminded = row[3];

    if (lastDateReminded === "") {
      sendBrief(task, details, frequency);
      sheet.getRange(i + 1, 4).setValue(now);
    } else {
      const lastRemindedDate = new Date(lastDateReminded);
      if (isTimeToSend(frequency, lastRemindedDate, now)) {
        sendBrief(task, details, frequency);
        sheet.getRange(i + 1, 4).setValue(now);
      }
    }
  }
}

/**
 * Checks if it's time to send the brief based on the frequency.
 * @param {string} frequency The frequency (e.g., "Every friday at 8am").
 * @param {Date} lastRemindedDate The last date the brief was sent.
 * @param {Date} now The current date and time.
 * @return {boolean} True if it's time to send the brief, false otherwise.
 */
function isTimeToSend(frequency, lastRemindedDate, now) {
  if (!frequency) return false;

  const parts = frequency.toLowerCase().split(" ");

  if (parts[0] === "every") {
    if (parts[1] === "day") {
      return now.getTime() - lastRemindedDate.getTime() >= 24 * 60 * 60 * 1000;
    } else if (parts[1] === "week") {
      const dayOfWeek = parts[2];
      const time = parts[4];

      const targetDay = getDayOfWeekNumber(dayOfWeek);
      const targetTime = getTimeInMinutes(time);

      const nowDay = now.getDay();
      const nowMinutes = now.getHours() * 60 + now.getMinutes();

      const lastSentDay = lastRemindedDate.getDay();
      const lastSentMinutes = lastRemindedDate.getHours() * 60 + lastRemindedDate.getMinutes();

      const dayDiff = (targetDay - nowDay + 7) % 7;

      if (dayDiff === 0 && nowMinutes >= targetTime && (lastSentDay !== targetDay || lastSentMinutes < targetTime)) {
        return true;
      } else if (dayDiff === 0 && nowMinutes < targetTime && lastSentDay === targetDay && lastSentMinutes >= targetTime) {
          return false;
      } else if (dayDiff > 0) {
        return true;
      } else if (dayDiff < 0) {
        return true;
      } else {
        return false;
      }
    }
  }
  return false;
}

/**
 * Gets the day of the week number (0 for Sunday, 1 for Monday, etc.).
 * @param {string} dayOfWeek The day of the week (e.g., "friday").
 * @return {number} The day of the week number.
 */
function getDayOfWeekNumber(dayOfWeek) {
  const days = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];
  return days.indexOf(dayOfWeek);
}

/**
 * Converts time string to minutes (e.g., "8am" to 480).
 * @param {string} timeString The time string (e.g., "8am", "2:30pm").
 * @return {number} The time in minutes.
 */
function getTimeInMinutes(timeString) {
  if (!timeString) return 0;
  const parts = timeString.toLowerCase().split(":");
  let hours = parseInt(parts[0]);
  const minutes = parseInt(parts[1].slice(0,2));
  const ampm = parts[1].slice(2);
  if (ampm === 'pm' && hours < 12) hours += 12;
  if (ampm === 'am' && hours === 12) hours = 0;

  return hours * 60 + minutes;
}

/**
 * Sends the graphic design brief via email.
 * @param {string} task The task.
 * @param {string} details The details.
 * @param {string} frequency The frequency.
 */
function sendBrief(task, details, frequency) {
  const aiBrief = generateAIBrief(task, details);

  const subject = "New Graphic Design Brief";
  const body = `
    Task: ${task}
    Details: ${details}
    Frequency: ${frequency}
    AI-Generated Brief: ${aiBrief}
  `;

  MailApp.sendEmail({
    to: Session.getActiveUser().getEmail(),
    subject: subject,
    body: body,
  });
}

/**
 * Generates an AI-powered creative graphic design brief.
 * @param {string} task The task.
 * @param {string} details The details.
 * @return {string} The AI-generated brief.
 */
function generateAIBrief(task, details) {
  return `AI generated brief for ${task} with these details: ${details}.  Be creative!`; // Replace with your AI logic
}

/**
 * Sets up a time-driven trigger to run the script.
 * This function should be run once to install the trigger.
 */
function createTrigger() {
  ScriptApp.newTrigger("sendGraphicDesignBriefs")
      .timeBased()
      .everyWeeks(1)
      .atHour(8)
      .onWeekDay(ScriptApp.WeekDay.FRIDAY)
      .create();
}
